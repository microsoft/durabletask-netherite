{
  "version": "2.0",
  "logging": {
    "logLevel": {
      // ------ NOTE: 
      // The log levels in this section 
      // - determine what is displayed in the console when running func.exe locally
      // - determine what is stored and billed by Application Insights
      // But they do not fully control the logging:
      // - have no effect on what is collected by internal analytics
      // - have no effect on what is traced to the console when running in a container
      // - have no effect on what is shown in the Live Metrics side panel in the portal

      // ---- Per-invocation framework-generated logging
      //"Host.Triggers.DurableTask": "Information", // use this setting if you need analytics in the portal
      "Host.Triggers.DurableTask": "Warning", // use this setting otherwise

      // ---- Per-invocation application-generated logging
      //"Function": "Information", // use this setting for small-scale debugging only
      "Function": "Warning", // use this setting when running perf tests

      // --- the levels below are used to control the Netherite tracing.
      "DurableTask.Netherite": "Information",
      "DurableTask.Netherite.FasterStorage": "Warning",
      "DurableTask.Netherite.FasterStorage.Performance": "Error",
      "DurableTask.Netherite.EventHubsTransport": "Warning",
      "DurableTask.Netherite.Events": "Warning",
      "DurableTask.Netherite.WorkItems": "Warning",
      "DurableTask.Netherite.Client": "Warning",
      "DurableTask.Netherite.LoadMonitor": "Warning"
    },

    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "maxTelemetryItemsPerSecond": 1,
        "excludedTypes": "Exception"
      }
    }
  },
  "extensions": {
    "http": {
      "routePrefix": ""
    },
    "durableTask": {

      "hubName": "perftests",

      "UseGracefulShutdown": true, // helps to avoid lengthy waits for lease expiration

      "maxConcurrentActivityFunctions": "100",
      "maxConcurrentOrchestratorFunctions": "100",

      "storageProvider": {

        "type": "Netherite",
        // "type": "AzureStorage",

        "StorageConnectionName": "AzureWebJobsStorage",
        "EventHubsConnectionName": "EventHubsConnection",

        "TakeStateCheckpointWhenStoppingPartition": "true",
        "MaxNumberBytesBetweenCheckpoints": "20000000",
        "MaxNumberEventsBetweenCheckpoints": "10000",
        "IdleCheckpointFrequencyMs": "60000",

        "PackPartitionTaskMessages": 100,

        "PartitionCount": 12,

        // set this to false to force replay on each orchestration step
        "CacheOrchestrationCursors": true,

        // set this to control the max size of the orchestration instance cache
        // "InstanceCacheSizeMB": "50",

        // the consumer group to use. Two task hubs can use the same event hubs namespace
        // if their consumer groups are different.
        "EventHubsConsumerGroup": "$Default",

        // set this to true to use the PSF support in Faster. Will soon be obsolete.
        "UsePSFQueries": "false",

        // set this to "true" to disable all pipelining
        "PersistStepsFirst": false,

        // set this to x to inject faults with probability 1/x
        //"FaultInjectionProbability": 2000,
        // set this to true to attach replay checker
        //"AttachReplayChecker": true,
        // set this to true to attach replay checker
        //"AttachCacheDebugger": true,

        // can change this to use a different table, or blobs
        //"LoadInformationAzureTableName": "",

        // set this to "Scripted" to control the scenario with a partition script
        // or to "ClientOnly" to run only the client
        "PartitionManagement": "EventProcessorHost",

        // set this to "Local" to disable the global activity distribution algorithm
        // options: "Local", "Static", "Locavore"
        "ActivityScheduler": "Locavore",

        // controls whether the instance ids are kept in memory. If false, paged queries are not supported.
        "KeepInstanceIdsInMemory": true,

        // The log level limits below control the production of log events by the various components.
        // it limits production, not just consumption, of the events, so it can be used to prevent overheads.
        // "Debug" is a reasonable setting, as it allows troubleshooting without impacting perf too much.
        "LogLevelLimit": "Debug",
        "StorageLogLevelLimit": "Debug",
        "TransportLogLevelLimit": "Debug",
        "EventLogLevelLimit": "Debug",
        "WorkItemLogLevelLimit": "Debug",
        "ClientLogLevelLimit": "Debug",
        "LoadMonitorLogLevelLimit": "Debug",

        // the following can be used to collectd and direct trace output to additional specific sinks
        // which is useful in a testing and debugging context
        "TraceToConsole": false,
        "TraceToBlob": false
      }
    }
  }
}
    